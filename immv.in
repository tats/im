#! @im_path_perl@
################################################################
###
###				 immv
###
###	      Copyright (C) 1997  Internet Message Group
###
###		     This Perl5 library conforms
###		GNU GENERAL PUBLIC LICENSE Version 2.
###
###
### Author:  Internet Message Group <img@mew.org>
### Created: Apr 23, 1997
### Revised: @im_revised@
###

my $VERSION = "immv @im_version@";

$Prog = 'immv';

##
## Require packages
##

use IM::Config;
use IM::Folder;
use IM::File;
use integer;
use strict;
use vars qw($Prog $EXPLANATION @OptConfig
	    @msgs
	    $opt_link $opt_noharm $opt_src @opt_dst
	    $opt_verbose $opt_debug $opt_help);

##
## Environments
##

my %NewMsgCache = ();

$EXPLANATION = "
$Prog :: Internet Message Move
$VERSION

Usage: $Prog [options] +folder... msgs...
";

@OptConfig = (
    'link;b;;'    => "Remain original msg in src folder.",
    'noharm;b;;'  => "Display the commands but do not actually execute them.",
    'src;f;;'     => "Set source folder.",
    'dst;F@;;'    => "Set destination folders.",
    'verbose;b;;' => 'With verbose messages.',
    'debug;d;;'   => "With debug message.",
    'help;b;;'    => "Show this message.",
    );

##
## Profile and option processing
##

init_opt(\@OptConfig);
read_cfg();
read_opt(\@ARGV); # help?
help($EXPLANATION) && exit $EXIT_SUCCESS if $opt_help;

debug_option($opt_debug) if $opt_debug;

##
## Main
##

@opt_dst = uniq(@opt_dst);

@opt_dst || im_die "no folder specified.\n";
@ARGV    || im_die "no message specified.\n";

@msgs  = @ARGV;

immv($opt_src, \@opt_dst, \@msgs);
exit $EXIT_SUCCESS;

##################################################
##
## Work horse
##
sub immv ($$$) {
    my ($src, $dsts, $msgs) = @_;
    my @msg_paths;

    chk_folder_existance($src, @{$dsts});   # not return in case false.
    chk_msg_existance($src, @{$msgs});      # not return in case false.

    @msg_paths = impath($src, @{$msgs});

    foreach (@msg_paths){
	refile_one($_, $dsts);
    }
}

sub refile_one ($$) {
    my ($src_path, $dsts) = @_;
    my ($dst_path, $link_it);

    foreach (@{$dsts}){

	if (defined $NewMsgCache{$_}){
	    $NewMsgCache{$_} =~ s|([^/]+)$|$1+1|e; # increment cache
	    $dst_path = $NewMsgCache{$_};
	} else {
	    $dst_path = $NewMsgCache{$_}
	    = impath($_, 'new');
	}
	if ($opt_link){
	    im_link($src_path, $dst_path) || die $@;      # XXX
	} elsif ($link_it){
	    im_link($link_it, $dst_path) || die $@;       # XXX
	} else {
	    im_rename($src_path, $dst_path) || die $@;    # XXX
	}
	if (! $link_it){
	    $link_it = $dst_path;
	}
	touch_folder($dst_path) unless $opt_noharm;
    }
}

##
## Check folder existance.
##
sub chk_folder_existance (@) {
    my @folders = @_;
    my $path;

    im_debug("chk_folder_existance: folder: @folders\n") if (&debug('all'));

    foreach (@folders){
	$path = impath($_);

	im_die "no folder $_. (Nothing was refiled.)\n"
	    if (!-d $path);
	im_die "folder $_ is not writable. (Nothing was refiled.)\n"
	    if (!-w $path);
    }
    im_debug("chk_folder_existance: OK.\n") if (&debug('all'));
}

sub chk_msg_existance ($@) {
    my $folder = shift;
    my @paths  = impath($folder, @_);

    im_debug("chk_msg_existance: folder: $folder msg: @_\n") if (&debug('all'));

    foreach (@paths){
	im_die "message specification error in $folder. (Nothing was refiled.)\n"
	    if (!-f $_);
    }
    im_debug("chk_msg_existance: OK.\n") if (&debug('all'));;
}

sub impath ($@) {
    my $folder = shift;
    my @msgs  = @_;
    my @paths;

    im_debug("impath: folder: $folder msgs: @msgs\n") if (&debug('all'));;
    @paths = get_message_paths($folder, @msgs);
    im_debug("impath: paths: @paths\n") if (&debug('all'));;

    return wantarray ? @paths : $paths[0];
}

sub uniq (@) {
    my @array = @_;
    my %hash;

    foreach (@array){
	$hash{$_} = $_;
    }
    return keys(%hash);
}

### Local Variables:
### mode: perl
### End:
