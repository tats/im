# -*-Perl-*-
################################################################
###
###			       Alias.pm
###
###	      Copyright (C) 1997  Internet Message Group
###
###		     This Perl5 library conforms
###		GNU GENERAL PUBLIC LICENSE Version 2.
###
###
### Author:  Internet Message Group <img@mew.org>
### Created: Apr 23, 1997
### Revised: @im_revised@
###

my $PM_VERSION = "IM::Alias.pm @im_version@";

package IM::Alias;
require 5.003;
require Exporter;

use IM::Config qw(expand_path);
use IM::Util;
#use FileHandle;
use integer;
use strict;
use vars qw(@ISA @EXPORT);

@ISA = qw(Exporter);
@EXPORT = qw(alias_open alias_close
	     alias_list_mail alias_list_host
	     alias_lookup alias_host_completion);

=head1 NAME

Alias - mail and host alias looking up package

=head1 SYNOPSIS

  use IM::Alias;

  &alias_open(mail_alias_paths, host_alias_paths);
  $result = &alias_lookup(user_name);
  $result = &alias_host_completion(mail_address);
  &alias_list_mail(prefix_string);
  &alias_list_host(prefix_string);
  &alias_close;

=head1 DESCRIPTION

  alias_open("$HOME/.im/Aliases", "$HOME/.hostaliases");

  $result = alias_lookup('u');
  print "$result\n" if ($result);

  $result = alias_host_completion('u@h');
  print "$result\n" if ($result);

  &alias_list_mail("a") displays mail aliases which start with "a".
  &alias_list_host("") displays all host aliases.

  alias_close;

=cut

use vars qw(@MA_HANDLES @HA_HANDLES);

##### OPEN ALIAS FILES #####
#
# alias_open()
#	return value: none
#
sub alias_open (;$$) {
    my ($mail_aliases, $host_aliases) = @_;
    my ($file, $ali);
    my ($ALIAS);

    unless ($mail_aliases) {
	$mail_aliases = '~/.im/Aliases';
    }
    unless ($host_aliases) {
	$host_aliases = '~/.hostaliases';
    }

    foreach $ali (split(',', $mail_aliases)) {
	$ali = expand_path($ali);
	$ALIAS = alias_open_one($ali);
	if ($ALIAS) {
	    push(@MA_HANDLES, $ALIAS);
	    im_debug("mail alias file $ali with handle $ALIAS\n")
		if &debug('alias');
	} else {
	    im_notice("can't open mail-aliases file: $ali\n");
	}
    }
    foreach $ali (split(',', $host_aliases)) {
	$ali = expand_path($ali);
	$ALIAS = alias_open_one($ali);
	if ($ALIAS) {
	    push(@HA_HANDLES, $ALIAS);
	    im_debug("host alias file $ali with handle $ALIAS\n")
		if &debug('alias');
	} else {
	    im_notice("can't open host-aliases file: $ali\n");
	}
    }
}

##### CLOSE ALIAS FILES #####
#
# alias_close()
#	return value: none
#
sub alias_close () {
    my ($h);
    foreach $h (@MA_HANDLES) {
	im_debug("closing mail alias file $h\n") if &debug('alias');
	alias_close_one($h);
    }
    foreach $h (@HA_HANDLES) {
	im_debug("closing host alias file $h\n") if &debug('alias');
	alias_close_one($h);
    }
}

sub alias_list_mail (;$) {
    my $str = shift;
    my @list = ();
    local ($_);
    my ($h);

    $str = '' unless defined($str);
    foreach $h (@MA_HANDLES) {
	im_warn("searching $str with $h.\n") if (&debug('alias'));
	alias_rewind($h);
	while (defined($_ = alias_readline($h))) {
	    next if (/^[#;]/);
	    chomp;
	    next if (/^$/);
	    while (/^(.*\S)\s*\\$/) {
		my $cont;
		$_ = $1;
		unless (defined($cont = alias_readline($h))) {
		    im_warn("EOF encountered on the entry: $_.\n");
		    return ();
		}
		chomp($cont);
		$cont =~ s/^\s*/ /;
		$_ .= $cont;
	    }
	    if (/^$str.*:/) {
		    push (@list, $_);
	    }
	}
    }
    return @list;
}

sub alias_list_host ($) {
    my $str = shift;
    my @list = ();
    local ($_);
    my ($h);

    foreach $h (@HA_HANDLES) {
	im_debug("searching $str with $h.\n") if &debug('alias');
	alias_rewind($h);
	while (defined($_ = alias_readline($h))) {
	    next if (/^#/);
	    chomp;
	    if (/^($str.*)\t\s*(.+)/) {
		push (@list, $_);
	    }
	}
    }
    return @list;
}

##### USER LEVEL ALIAS LOOKUP #####
#
# alias_lookup(address, operator)
#	address: an address to be looked up
#	operator: operator charactors in address notation
#	return value: aliased address OR null
#
sub alias_lookup ($) {
    my $addr = shift;
    my $a;
    local ($_);
    my ($h);
    return '' if ($addr =~ /[\@%!:]/o);
#   if ($Alias_lookup_count++ == 100) {
#	&error_log(0, "May be alias loop: $addr\n");
#	&error_exit;
#   }
    foreach $h (@MA_HANDLES) {
	im_debug("searching $addr with $h.\n") if &debug('alias');
	alias_rewind($h);
	while (defined($_ = alias_readline($h))) {
#	    im_debug("$_.\n") if (&debug('alias'));
	    next if (/^[#;]/);
	    chomp;
	    next if (/^$/);
	    while (/(.*\S)\s*\\$/) {
		my $cont;
		$_ = $1;
		unless (defined($cont = alias_readline($h))) {
		    im_warn("EOF encountered on the entry: $_.\n");
		    return '';
		}
		chomp($cont);
		$cont =~ s/^\s*/ /;
		$_ .= $cont;
	    }
	    my $q_addr = quotemeta($addr);
	    if (/^\s*$q_addr\s*[:=]\s*(.+)$/i) {
		im_debug("found $addr -> $1\n") if &debug('alias');
		$a = $1;
## if ISO2022JP
#		if ($main::Iso2022jp_code_conversion) {
#		    $a = &conv_iso2022jp($a)
#		}
#		$a = &struct_iso2022jp_mimefy($a)
#		  if ($main::Iso2022jp_header_mime_conv);
#		im_debug("return: $a\n") if &debug('alias');
## endif
		return $a;
	    }
	}
    }
    return '';
}

##### USER LEVEL ADDRESS COMPLETION #####
#
# alias_host_completion(address)
#	address: an address to be tried completion
#	return value: completed address OR null
#
sub alias_host_completion ($) {
    my $addr = shift;
    my ($local_part, $domain_part, $he_name);
    local ($_);
    my ($h);
    if ($addr =~ /^([\w-.]+)@([\w-.]+)$/) {
	($local_part, $domain_part) = ($1, $2);
	foreach $h (@HA_HANDLES) {
	    im_debug("searching $domain_part with $h.\n") if &debug('alias');
	    alias_rewind($h);
	    while (defined($_ = alias_readline($h))) {
#		im_debug("alias: $_.\n") if (&debug('alias'));
		chomp;
		next if (/^#/);
		if (/^$domain_part\s+([\w.-]+)/) {
		    im_debug("found(file): $domain_part -> $1\n")
		      if (&debug('alias'));
		    return "$local_part\@$1";
		}
	    }
	}
	if ($main::Cmpl_with_gethostbyname) {
	    im_debug("searching $domain_part with gethostbyname().\n")
		if (&debug('alias'));
	    ($he_name) = gethostbyname($domain_part);
	    if (length($he_name) > length($domain_part)) {
		im_debug("found(gethostbyname): $domain_part -> $he_name\n")
		    if (&debug('alias'));
		return "$local_part\@$he_name";
	    }
	}
    }
    return '';
}

##### OPEN A ALIAS FILE WITH NEW FILE HANDLE #####
#
# alias_open_one(file_name)
#	return value: handle
#
no strict 'refs';
sub alias_open_one ($) {
    my $file = shift;
    open($file, $file) || return undef;
    return $file;
}

sub alias_rewind ($) {
    seek(shift, 0, 0);
}

sub alias_readline ($) {
    my $fh = shift;
    return scalar(<$fh>);
}

sub alias_close_one ($) {
    close(shift);
}

1;
